#!/usr/bin/env python3

"""
Именованные аргументы. Измените функцию adder из упражнения 2 так,
чтобы она принимала и вычисляла сумму/конкатенацию трех аргументов:
def adder(good, bad,ugly). После этого определите значения по умолчанию
для каждого из аргументов и поэкспериментируйте с функцией в интерак-
тивной оболочке. Попробуйте передавать ей один, два, три и четыре аргу-
мента. Попробуйте передавать аргументы по именам. Будет ли работать та-
кой вызов: adder(ugly=1, good=2)? Почему? Наконец, обобщите новую версию
функции adder так, чтобы принимала и вычисляла сумму/конкатенацию
произвольного числа именованных аргументов. Решение будет напоминать
то, что было получено в упражнении 3, с той лишь разницей, что вам при-
дется выполнить обход словаря, а не кортежа. (Подсказка: метод dict.keys()
возвращает список, который можно обойти с помощью цикла for или while,
но не забудьте обернуть его вызовом функции list в Python 3.0, чтобы обе-
спечить возможность обращения к элементам по индексам!)
"""
def adder(*args):
	if len(args) == 1:
		print ("only one argument")
#		print(args)
		return(args)
	if len(args) > 1:
		tmp=args[0]
		for arg in args[1:]:
			tmp+=arg
		#print("tmp=",tmp)
		return(tmp)


#	res = args[0]
#	for arg in args[1:]:
#		if test(arg, res):
#			res = arg
#	return(res)

print(adder('x','y'))
print(type(adder('x','y')))
print(adder('y'))
print(type(adder('y')))
print(adder((1,2,3),(4,5,6)))
print(type(adder((1,2,3),(4,5,6))))
print(adder(1.01,2.02))
print(type(adder(1.01,2.02)))

